# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VectorLayerToDxf
                                 A QGIS plugin
 Convert a vector layer to DXF format, 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Juan Ortiz - Vielca Ingenieros
        email                : juan.o@vielca.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

from qgis.core import *
from qgis.gui import QgsFileWidget

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .vectorlayer_dxf_dialog import VectorLayerToDxfDialog
import os.path

import ezdxf


class VectorLayerToDxf:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VectorLayerToDxf_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Vector Layer to DXF')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Globales
        self.selectedLayer = None
        self.onlySelectedFeatures = False
        self.layerFieldNameToGroup = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VectorLayerToDxf', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/vectorlayer_dxf/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'VectorLayer to DXF Converter'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Vector Layer to DXF'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = VectorLayerToDxfDialog()
            self.dlg.cbCapaEntrada.currentIndexChanged.connect(self.cbCapaEntrada_currentIndexChanged)
            self.dlg.cbFieldSelection.currentIndexChanged.connect(self.cbFieldSelection_currentIndexChanged)
            self.dlg.pbConvertir.clicked.connect(self.convertirCapa2DFX)
            self.dlg.fwFicheroSalida.setStorageMode(QgsFileWidget.StorageMode.SaveFile)
            self.dlg.fwFicheroSalida.setFilter('*.dxf')

        self.dlg.cbCapaEntrada.clear()
        self.dlg.cbFieldSelection.clear()

        layer_names = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        layer_names.insert(0,'Seleccione una capa...')
        
        self.dlg.cbCapaEntrada.addItems(layer_names)
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    def cbCapaEntrada_currentIndexChanged(self):
        self.dlg.cbFieldSelection.clear()
        selectedCapaEntradaIndex = self.dlg.cbCapaEntrada.currentIndex()

        selectedLayerName = self.dlg.cbCapaEntrada.currentText()

        if selectedCapaEntradaIndex > 0:
            layer = QgsProject.instance().mapLayersByName(selectedLayerName)[0]
            self.selectedLayer = layer
            fields_names = [field.name() for field in layer.fields()]
            fields_names.insert(0, 'Seleccione un campo para agrupar (opcional)...')
            self.dlg.cbFieldSelection.addItems(fields_names)


    def cbFieldSelection_currentIndexChanged(self):
        selectedFieldSelectionIndex = self.dlg.cbFieldSelection.currentIndex()
        if selectedFieldSelectionIndex != 0:
            self.layerFieldNameToGroup = self.dlg.cbFieldSelection.currentText()
        else:
            self.layerFieldNameToGroup = None


    def createFeatureToPoliline(self, feature):
        self

    def crearDXF(self, features, filename):
        doc = ezdxf.new('R2010')  # create a new DXF R2010 drawing, official DXF version name: 'AC1024'

        msp = doc.modelspace()  # add new entities to the modelspace

        layers = []
        features_points = []

        for feature in features:
            geom = feature.geometry()

            if geom.wkbType() != QgsWkbTypes.MultiPolygon:
                QMessageBox.information(self.iface.mainWindow(), "Error en feature", 'El tipo de geometría de la capa no está soportado')
                return

            
            multipoligon = geom.asWkt().replace('MultiPolygon ','')
            poligons = multipoligon.split('),(')
            
            for poligon in poligons:
                multipoligon = poligon.replace(')','').replace('(','')
                points = multipoligon.split(',')
                lwpolyline_points = list()

                for point in points:
                    p = point.strip().split(' ')
                    lwpolyline_points.append((float(p[0]), float(p[1])))
                
                if self.dlg.cbFieldSelection.currentIndex() > 0:
                    layer = feature[self.layerFieldNameToGroup].replace('/','_')
                    if layer not in doc.layers:
                        doc.layers.new(layer)

                    msp.add_lwpolyline(lwpolyline_points, dxfattribs={'layer': layer})
                else:
                    msp.add_lwpolyline(lwpolyline_points)

        doc.saveas(filename)

    def convertirCapa2DFX(self):
        fichero_salida = self.dlg.fwFicheroSalida.filePath()
        if fichero_salida is None or fichero_salida == '':
             QMessageBox.information(self.iface.mainWindow(), "Falta información", 'Debe seleccionar un fichero para la salida')
             return None

        onlySelectedFeatures = self.dlg.ckSeleccionados.isChecked()
        if onlySelectedFeatures:
            features = self.selectedLayer.selectedFeatures()
        else:
            features = self.selectedLayer.getFeatures()

        self.crearDXF(features, fichero_salida)

      
        

        btn = QMessageBox.information(self.iface.mainWindow(), "Resultado de la conversión", 'Convertido!')
        print(fichero_salida)
        self.dlg.close()
        
