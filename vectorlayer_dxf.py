# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VectorLayerToDxf
                                 A QGIS plugin
 Convert a vector layer to DXF format, 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Juan Ortiz - Vielca Ingenieros
        email                : juan.o@vielca.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

from qgis.core import *
from qgis.gui import QgsFileWidget

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .vectorlayer_dxf_dialog import VectorLayerToDxfDialog
import os.path

import ezdxf


class VectorLayerToDxf:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VectorLayerToDxf_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Vector Layer to DXF')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Globales
        self.selectedLayer = None
        self.onlySelectedFeatures = False
        self.layerFieldNameToGroup = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VectorLayerToDxf', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/vectorlayer_dxf/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'VectorLayer to DXF Converter'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Vector Layer to DXF'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = VectorLayerToDxfDialog()
            self.dlg.cbCapaEntrada.currentIndexChanged.connect(self.cbCapaEntrada_currentIndexChanged)
            self.dlg.cbFieldSelection.currentIndexChanged.connect(self.cbFieldSelection_currentIndexChanged)
            self.dlg.pbConvertir.clicked.connect(self.convertirCapa2DFX)
            self.dlg.fwFicheroSalida.setStorageMode(QgsFileWidget.StorageMode.SaveFile)
            self.dlg.fwFicheroSalida.setFilter('*.dxf')

        self.dlg.cbCapaEntrada.clear()
        self.dlg.cbFieldSelection.clear()

        layer_names = [layer.name() for layer in QgsProject.instance().mapLayers().values()]
        layer_names.insert(0,'Seleccione una capa...')
        
        self.dlg.cbCapaEntrada.addItems(layer_names)
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


    def cbCapaEntrada_currentIndexChanged(self):
        self.dlg.cbFieldSelection.clear()
        selectedCapaEntradaIndex = self.dlg.cbCapaEntrada.currentIndex()

        selectedLayerName = self.dlg.cbCapaEntrada.currentText()

        # print(selectedCapaEntradaIndex)
        if selectedCapaEntradaIndex > 0:
            layer = QgsProject.instance().mapLayersByName(selectedLayerName)[0]
            self.selectedLayer = layer
            fields_names = [field.name() for field in layer.fields()]
            fields_names.insert(0, 'Seleccione un campo para agrupar (opcional)...')
            self.dlg.cbFieldSelection.addItems(fields_names)

        # print(selectedCapaEntradaIndex, selectedLayerName )
        # pass


    def cbFieldSelection_currentIndexChanged(self):
        selectedFieldSelectionIndex = self.dlg.cbFieldSelection.currentIndex()
        if selectedFieldSelectionIndex != 0:
            self.layerFieldNameToGroup = self.dlg.cbFieldSelection.currentText()
        else:
            self.layerFieldNameToGroup = None


    def createFeatureToPoliline(self, feature):
        self

    def crearDXF(self, features, filename):
        doc = ezdxf.new('R2010')  # create a new DXF R2010 drawing, official DXF version name: 'AC1024'

        msp = doc.modelspace()  # add new entities to the modelspace

        layers = []
        features_points = []

        for feature in features:
            geom = feature.geometry()

            if geom.wkbType() != QgsWkbTypes.MultiPolygon:
                QMessageBox.information(self.iface.mainWindow(), "Error en feature", 'El tipo de geometría de la capa no está soportado')
                return

            # print(geom.wkbType())
            # if geom.wkbType() == QgsWkbTypes.Point:
            #     x = geom.asPoint()                
            # elif geom.wkbType() == QgsWkbTypes.LineString:
            #     x = geom.asPolyline()
            # elif geom.wkbType() == QgsWkbTypes.Polygon:
            #     x = geom.asPolygon()
            # elif geom.wkbType() == QgsWkbTypes.MultiPolygon:
            #     x = geom.asMultiPolygon()
            # else:
            #     QMessageBox.information(self.iface.mainWindow(), "Error en feature", 'El tipo de geometría de la capa no está soportado')
            #     return
            # multipoligon = 'MultiPolygon (
            # (
            # (-0.55233046524348084 39.3325071152255461, -0.55188014573933375 39.33344359805017376, -0.54360511346253082 39.35175579707566129, -0.54217884752929246 39.35536531870985044, -0.5386485915631497 39.36138076857775303, -0.53807513056479339 39.36745870193397678, -0.53770224097633201 39.37245078620363614, -0.53752513243483235 39.37418576558039973, -0.53673684449827241 39.38141227226115149, -0.5365695679515563 39.38682310258239738, -0.5208612100603659 39.39371440144715564, -0.51233705439686561 39.39768553573837551, -0.50964708153938076 39.39855591443758698, -0.50844464081856111 39.39873737764281003, -0.50452979707140111 39.39911294204412684, -0.47564589008241975 39.39831875776225445, -0.47239423208282399 39.3986535681025174, -0.46590034186159002 39.39970149105361941, -0.46570091683070192 39.39879626528767886, -0.46550344489554946 39.39693614732233584, -0.46548458985837299 39.39675555880916136, -0.46516814154351965 39.39523518440491756, -0.46469095164082341 39.3943058883207442, -0.46459763345394195 39.39399755431387717, -0.46451751267159963 39.3930048373535513, -0.46430905748433071 39.39200932438964742, -0.46429981256137659 39.39196407860745808, -0.4638768923756868 39.39081974978112299, -0.46385285708104618 39.39070211104188246, -0.46364024768266532 39.38966146193926932, -0.46318482200502104 39.38493087815218274, -0.46245474460062652 39.38265371986282304, -0.46201945951431467 39.38085144058806009, -0.46182264384225857 39.38003633879958443, -0.46168516598044612 39.37946577381136137, -0.46161698906461723 39.37918500757953666, -0.46133096874269869 39.37554815823714449, -0.46119773676237008 39.37522092541006913, -0.4601362908120305 39.37488241805417744, -0.45958903045962529 39.3746091961084943, -0.45907624321535601 39.37434573387696446, -0.45858796412628872 39.37404676888984056, -0.45811095970702698 39.3737570591529078, -0.45764588542840279 39.37345859837085271, -0.45729450782913994 39.37322568496694686, -0.45683042095212356 39.37290021637399917, -0.45637924392527696 39.3725389913130428, -0.4559947166232905 39.37226030382436903, -0.45565854823909741 39.37192862075291089, -0.45542283862859889 39.37170724411746647, -0.45516557075603858 39.3714403501158472, -0.45490863186975683 39.37116445282565991, -0.45474186112179105 39.37096260340040743, -0.45445424717891869 39.37067252021045505, -0.45419679694881854 39.37031102531204141, -0.45399752824093997 39.37004539841835538, -0.45383239844210255 39.36979853669105012, -0.45364505601908722 39.36952416309058833, -0.45350312250199187 39.36927780969864443, -0.45336119226552135 39.36903145620734534, -0.45320897433188545 39.36874884203606939, -0.4530683538482701 39.36846648075631805, -0.45294994857606502 39.36821163384376376, -0.45280801996060427 39.36796527971927873, -0.45269957620933726 39.36775569588449741, -0.45259146035064168 39.36753711010165091, -0.4524727298173204 39.36729126370953935, -0.45236592449780494 39.36703667030494103, -0.45225781068587811 39.36681808425751683, -0.45210461854798828 39.36656247259844577, -0.45196433380733075 39.36627110921656225, -0.4518111438498929 39.36601549722296767, -0.45167918344593017 39.36581440529990772, -0.45151439855378522 39.36555853885204925, -0.45133670721187785 39.36533842455435916, -0.45120343968066118 39.36517333957833387, -0.45104796150065835 39.36498073966274092, -0.45088023246774894 39.364805889082362, -0.45067869535471872 39.36460326918754049, -0.45048744610884567 39.36443690970396858, -0.45027398696770954 39.36424303679496006, -0.45003766446895449 39.36403965227237478, -0.44980068584310329 39.36385427095162015, -0.44954018776993937 39.36367738060297938, -0.44941590185689922 39.36358456282768259, -0.44924621313280128 39.36346372023560747, -0.44850304429161342 39.36347442820215292, -0.44800340355559759 39.36349048088202807, -0.44730596377579224 39.36352020357476533, -0.44650382697671825 39.36355662969064184, -0.44570201652775043 39.36358405019952755, -0.44458742595629491 39.3635955749169355, -0.44383331561601885 39.36358799540919051, -0.44304343094605297 39.36360664883729754, -0.4422184280866715 39.36363353355336869, -0.44153291145725837 39.36365447473082924, -0.44067311854874119 39.36368058310023343, -0.44011615043750191 39.36367732127896346, -0.43974440192592024 39.36368714706140537, -0.43911555248641204 39.36374536020139914, -0.43834721415478373 39.36380950296712911, -0.43763652800692532 39.36388392079017251, -0.43697255697493514 39.36395035566749812, -0.43626153902657167 39.36403376764124573, -0.43564395170147246 39.36410121918735427, -0.4349571137759074 39.36415812927060642, -0.43419970592296919 39.36424050359077853, -0.43343069998303524 39.36432261789381926, -0.43282437608518953 39.36439931285974581, -0.43224223254742256 39.36444951061080388, -0.43177605714690359 39.36450227094099574, -0.43127509038505746 39.36455425914052597, -0.43061717255041848 39.36459376512190289, -0.43059545219837825 39.35681844470192914, -0.43065206441682918 39.35654041597110364, -0.43077725847418868 39.35629093106982168, -0.431409579020753 39.35550310612008218, -0.43185570438678744 39.3547291797879808, -0.43294558453337945 39.35253703673171088, -0.43328138912421216 39.35192283076258946, -0.43333067861746127 39.35142842132322727, -0.4333547965625954 39.35118570811551564, -0.43336193208446705 39.35035702995161699, -0.43355089085528836 39.34931615175686659, -0.43374029281571991 39.34889691021749059, -0.43414932249602795 39.34850053794900759, -0.434290429336118 39.34844960106106271, -0.43388346243605364 39.3475216832134862, -0.43356799983693778 39.34694713967108726, -0.43268499275688832 39.3457113959628515, -0.43189471017833214 39.34416237692528284, -0.43159548536849174 39.34346205928051887, -0.43095382889347927 39.341024416051944, -0.4308946758489729 39.33978886022871535, -0.43196834587729599 39.33708284999924842, -0.43257670429848838 39.3360332287759249, -0.43354104010743089 39.3343698454222519, -0.43202509241605946 39.33384983535565738, -0.43158191031841464 39.33369588614454671, -0.4314477534226327 39.33355778191034346, -0.43145203924890968 39.3334407580879386, -0.43075473736105929 39.3325244183927083, -0.42926776747477297 39.33036540584382834, -0.42852527484007985 39.33036698303857293, -0.426169961876462 39.33037786042618222, -0.42611226084541565 39.32942164529067242, -0.42591346277304293 39.328201046577, -0.42587795534343575 39.3272723511245772, -0.42564935201316079 39.32591595921111605, -0.42493047073260792 39.32180100614357343, -0.42523803441775843 39.32100603910122771, -0.4249442847360721 39.32047701503254444, -0.4234819227478207 39.3182914777229513, -0.42326733757193136 39.31781825975955513, -0.42316130898718779 39.31628440759195797, -0.42271428434472064 39.31550874197197487, -0.42268646419808686 39.31531893913723508, -0.4229330864379553 39.31428839553755239, -0.42299595864598899 39.31352404106069542, -0.42295917991613458 39.31294666028810525, -0.42279823962936891 39.31227643666465354, -0.42256678435170236 39.31163167596407959, -0.42164002503647313 39.30971025364801363, -0.42451618215495329 39.30686418418989092, -0.42483132054017503 39.30649279716111266, -0.42538873742159755 39.30552318313827698, -0.42599845767007605 39.30470787480891914, -0.42955517252309039 39.30194880041420191, -0.4301947282060356 39.30189987997734136, -0.43057872375597811 39.30186332616586498, -0.43954663055797644 39.30110628756033009, -0.4430359654931133 39.30081373633906594, -0.44452195727368965 39.30076533710031583, -0.44601625967833342 39.30080719139203893, -0.44850338965930964 39.30096992388047994, -0.44870035744254821 39.30097424763598468, -0.45868653707403972 39.3012290605522594, -0.46486424154958395 39.30162516282489094, -0.46536147835680336 39.30166301977033783, -0.4701346308958031 39.30210021122977082, -0.47279529788854258 39.30227513488516422, -0.48003105389322964 39.30259419502736762, -0.4828089635960881 39.30241106289720676, -0.48713946444412415 39.30226139633992943, -0.49166053308515145 39.30326884969302625, -0.49594968110784071 39.30428015089041338, -0.49650040247648169 39.30444515614224343, -0.49685222047005101 39.30465993478183861, -0.50318084647248151 39.31028249131625074, -0.50399246791043828 39.31093955468309531, -0.50568944540563554 39.31213812990237955, -0.51263307022212479 39.3168093896228541, -0.51444122646868573 39.31749669205117925, -0.51839483119403862 39.31917570882153967, -0.51908906916196085 39.31955087722116815, -0.52087083885043683 39.32000326304716964, -0.52629012543684395 39.32156904124995123, -0.5387680094057159 39.32395070416380634, -0.54537912205812578 39.32860391277429102, -0.55233046524348084 39.3325071152255461)
            # )
            # )'

            
            multipoligon = geom.asWkt().replace('MultiPolygon ','')
            poligons = multipoligon.split('),(')
            
            for poligon in poligons:
                multipoligon = poligon.replace(')','').replace('(','')
                points = multipoligon.split(',')
                lwpolyline_points = list()

                for point in points:
                    p = point.strip().split(' ')
                    # print(p[0], p[1])
                    lwpolyline_points.append((float(p[0]), float(p[1])))
                
                if self.dlg.cbFieldSelection.currentIndex() > 0:
                    layer = feature[self.layerFieldNameToGroup].replace('/','_')
                    if layer not in doc.layers:
                        doc.layers.new(layer)

                    msp.add_lwpolyline(lwpolyline_points, dxfattribs={'layer': layer})
                else:
                    msp.add_lwpolyline(lwpolyline_points)

        doc.saveas(filename)

    def convertirCapa2DFX(self):
        fichero_salida = self.dlg.fwFicheroSalida.filePath()
        if fichero_salida is None or fichero_salida == '':
             QMessageBox.information(self.iface.mainWindow(), "Falta información", 'Debe seleccionar un fichero para la salida')
             return None

        onlySelectedFeatures = self.dlg.ckSeleccionados.isChecked()
        print(onlySelectedFeatures)
        if onlySelectedFeatures:
            features = self.selectedLayer.selectedFeatures()
        else:
            features = self.selectedLayer.getFeatures()

        self.crearDXF(features, fichero_salida)

        # print('Layer: ', self.selectedLayer)
        # print('FieldName: ', self.layerFieldNameToGroup)
        # print('Checked: ', str(self.dlg.ckSeleccionados.isChecked()))
        
        

        btn = QMessageBox.information(self.iface.mainWindow(), "Resultado de la conversión", 'Convertido!')
        print(fichero_salida)
        self.dlg.close()
        #QgsMessageLog.logMessage("message")
        
